# eda.py

import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import numpy as np

sns.set()

# Ensure 'figs' directory exists
output_dir = "/home/paztino/idmdp/finalproject2/maine-testimony/src/figs"
os.makedirs(output_dir, exist_ok=True)

# Load cleaned data from CSV files generated by bills.py
df_bills = pd.read_csv("/home/paztino/idmdp/finalproject2/maine-testimony/data/cleaned_bills.csv")
df_testimony = pd.read_csv("/home/paztino/idmdp/finalproject2/maine-testimony/data/cleaned_testimony.csv")

# Amendment Analysis: Distribution of bills with and without amendments
df_bills['has_amendment'] = df_bills['amendment'].notna()
amendment_counts = df_bills['has_amendment'].value_counts()
plt.figure(figsize=(6, 4))
sns.barplot(x=amendment_counts.index, y=amendment_counts.values)
plt.title("Bills with and without Amendments")
plt.xticks(ticks=[0, 1], labels=["No Amendment", "Has Amendment"])
plt.xlabel("Amendment Status")
plt.ylabel("Number of Bills")
plt.savefig(f"{output_dir}/amendment_counts.png")
plt.show()

# Top 10 Amendments by Frequency
top_amendments = df_bills['amendment'].value_counts().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=top_amendments.values, y=top_amendments.index)
plt.title("Top 10 Amendments by Frequency")
plt.xlabel("Frequency")
plt.ylabel("Amendment Code")
plt.savefig(f"{output_dir}/top_10_amendments.png")
plt.show()

#  File Naming Patterns: Word Cloud
file_names_combined = " ".join(df_bills['file'])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(file_names_combined)
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.title("Common Patterns in Bill File Names")
plt.savefig(f"{output_dir}/file_name_patterns.png")
plt.show()

#  Bill IDs (LD) Distribution
plt.figure(figsize=(10, 6))
sns.histplot(df_bills['ld'], kde=True, bins=30)
plt.title("Distribution of Bill IDs (LD)")
plt.xlabel("Bill ID (LD)")
plt.ylabel("Frequency")
plt.savefig(f"{output_dir}/bill_id_distribution.png")
plt.show()

# File Length Distribution
df_bills['file_length'] = df_bills['file'].apply(len)
plt.figure(figsize=(10, 6))
sns.histplot(df_bills['file_length'], kde=True, bins=20)
plt.title("Distribution of File Name Lengths")
plt.xlabel("File Name Length")
plt.ylabel("Frequency")
plt.savefig(f"{output_dir}/file_length_distribution.png")
plt.show()

# Text Analysis on File Names (Most Common Words)
common_words = pd.Series(" ".join(df_bills['file']).split()).value_counts().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=common_words.values, y=common_words.index)
plt.title("Top 10 Most Common Words in File Names")
plt.xlabel("Frequency")
plt.ylabel("Words")
plt.savefig(f"{output_dir}/common_words_in_filenames.png")
plt.show()

# Amendment Types Analysis (Pattern Recognition)
df_bills['amendment_type'] = df_bills['amendment'].str.extract(r'(^[A-Za-z]+)')
amendment_type_counts = df_bills['amendment_type'].value_counts().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=amendment_type_counts.values, y=amendment_type_counts.index)
plt.title("Top 10 Amendment Types")
plt.xlabel("Frequency")
plt.ylabel("Amendment Type")
plt.savefig(f"{output_dir}/amendment_type_counts.png")
plt.show()

# Missing Data Analysis
missing_data = df_bills.isnull().sum()
plt.figure(figsize=(10, 6))
sns.barplot(x=missing_data.index, y=missing_data.values)
plt.title("Missing Data by Column")
plt.xlabel("Columns")
plt.ylabel("Number of Missing Values")
plt.savefig(f"{output_dir}/missing_data_analysis.png")
plt.show()

# Unique Amendment Codes
unique_amendment_codes = df_bills['amendment'].nunique()
plt.figure(figsize=(6, 4))
plt.bar(['Unique Amendment Codes'], [unique_amendment_codes])
plt.title("Total Unique Amendment Codes")
plt.ylabel("Count")
plt.savefig(f"{output_dir}/unique_amendment_codes.png")
plt.show()

# Testimony Analysis (Top 10 Organizations by Testimony)
if 'organization' in df_testimony.columns:
    top_organizations = df_testimony['organization'].value_counts().head(10)
    plt.figure(figsize=(10, 6))
    sns.barplot(x=top_organizations.values, y=top_organizations.index)
    plt.title("Top 10 Organizations by Testimony Count")
    plt.xlabel("Number of Testimonies")
    plt.ylabel("Organization")
    plt.savefig(f"{output_dir}/top_organizations_testimony.png")
    plt.show()

print("EDA Completed.")
